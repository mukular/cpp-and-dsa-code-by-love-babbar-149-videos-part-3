/* Q.1. Given an integer array nums of unique elements, return all 
possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution 
in any order.

Example 1: 
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]
 
Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.
*/

/*
class Solution {
private:
    void solve(vector<int> nums, vector<int> output, int index, vector<vector<int> >& ans)
    {
        // base case
        if(index >= nums.size())
        {
            ans.push_back(output);
            return;
        }

        // exclude
        solve(nums, output, index+1, ans);

        // include
        int element = nums[index];
        output.push_back(element);
        solve(nums, output, index+1, ans);
    }

public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int> > ans;
        vector<int> output;
        int index = 0;
        solve(nums, output, index, ans);
        return ans;
    }
};
*/

/* Q.2. You are given a string 'STR' containing lowercase English letters from a to z inclusive.
Your task is to find all non-empty possible subsequences of 'STR'.
A subsequence of a string is the one which is generated by deleting 0 or more letters
from the string and keeping the rest of the letters in the same order

Constraints:
1 <= |STR| <= 16
where |STR| represents the length of string STR.

Sample Input 1:
abc
Sample Output 1:
a ab abc ac b bc c
Explanation Of Sample Input 1:
All possible subsequences of abc are :  
“a” , “b” , “c” , “ab” , “bc” , “ac”, “abc”

Sample Input 2:
bbb
Sample Output 2:
b b b bb bb bb bbb
*/

/*
void solve(string str, string output, int index, vector<string>& ans)
    {
        // base case
        if(index >= str.length())
        {
            if(output.length() > 0)
            {
                ans.push_back(output);
            }
            return;
        }

        // exclude
        solve(str, output, index+1, ans);

        // include
        char element = str[index];
        output.push_back(element);
        solve(str, output, index+1, ans);
    }

#include <bits/stdc++.h> 
vector<string> subsequences(string str){
        vector<string> ans;
        string output = "";
        int index = 0;
        solve(str, output, index, ans);
        return ans;
}
*/